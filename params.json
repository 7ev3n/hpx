{"name":"Hpx","tagline":"A general purpose C++ runtime system for parallel and distributed applications of any scale","body":"\r\n# HPX\r\n\r\nHPX is a general purpose C++ runtime system for parallel and distributed\r\napplications of any scale. Even if that's quite a mouthful, we mean every\r\nword of it!\r\n\r\nThe goal of HPX is to create a high quality, freely available, open source\r\nimplementation of the ParalleX model for conventional systems, such as\r\nclassic Linux based Beowulf clusters or multi-socket highly parallel SMP\r\nnodes. At the same time, we want to have a very modular and well designed\r\nruntime system architecture which would allow us to port our implementation\r\nonto new computer system architectures. We want to use real world applications\r\nto drive the development of the runtime system, coining out required\r\nfunctionalities and converging onto a stable API which will provide a\r\nsmooth migration path for developers. The API exposed by HPX is modelled\r\nafter the interfaces defined by the C++11 ISO standard and adheres to the\r\nprogramming guidelines used by the Boost collection of C++ libraries.\r\n\r\n## What's so special about HPX?\r\n\r\n* HPX exposes an uniform, standards-oriented API for ease of programming\r\n  parallel and distributed applications.\r\n* It enables programmers to write fully asynchronous  code using hundreds\r\n  of millions of threads.\r\n* HPX provides unified syntax and semantics for local and remote operations.\r\n* HPX makes concurrency manageable with dataflow and future based\r\n  synchronization.\r\n* It implements a rich set of runtime services supporting a broad range of\r\n  use cases.\r\n* It is designed to solve problems conventionally considered to be\r\n  scaling-impaired.\r\n* HPX has been designed and developed for systems of any scale, from\r\n  hand-held devices to very large scale systems.\r\n* It is the first fully functional implementation of the ParalleX execution\r\n  model.\r\n* HPX is published under a liberal open-source license and has an open,\r\n  active, and thriving developer community.\r\n\r\n\r\nThe documentation for the latest release of HPX (currently V0.9.11) can be\r\n(found here)[http://stellar.cct.lsu.edu/files/hpx_0.9.11/html/index.html].\r\n\r\n.. Additionally, we regularily upload the current status of the documentation\r\n   (which is being worked on as we speak)\r\n   (here)[http://stellar.cct.lsu.edu/files/hpx_master/docs/index.html].\r\n\r\nIf you plan to use HPX we suggest to start with the latest released version\r\n(currently HPX V0.9.11) which can be (downloaded here)[http://stellar.cct.lsu.edu/downloads/].\r\n\r\nIf you would like to work with the cutting edge version from this repository\r\nwe suggest following the current health status of the master branch by looking at\r\nour (contiguous integration results website)[http://hermione.cct.lsu.edu/waterfall>].\r\nWhile we try to keep the master branch stable and usable, sometimes new bugs\r\ntrick their way into the code base - you have been warned!\r\n\r\nIn any case, if you happen to run into problems we very much encourage and appreciate\r\nany issue reports through the (issue tracker for this Github project)[http://github.com/STEllAR-GROUP/hpx/issues].\r\n\r\n## Build Instructions\r\n\r\nAll of HPX is distributed under the Boost Software License,\r\nVersion 1.0 (See accompanying file LICENSE_1_0.txt or an online copy available\r\n(here)[http://www.boost.org/LICENSE_1_0.txt>].\r\n\r\nBefore starting to build HPX, please read about the\r\n(prerequisites)[http://stellar.cct.lsu.edu/files/hpx_0.9.5/docs/hpx/tutorial/getting_started.html].\r\n\r\nLinux\r\n-----\r\n\r\n1) Clone the master HPX git repository (or a stable tag)::\r\n\r\n    $ git clone git://github.com/STEllAR-GROUP/hpx.git\r\n\r\n2) Create a build directory. HPX requires an out-of-tree build. This means you\r\n   will be unable to run CMake in the HPX source directory::\r\n\r\n    $ cd hpx\r\n    $ mkdir my_hpx_build\r\n    $ cd my_hpx_build\r\n\r\n3) Invoke CMake from your build directory, pointing the CMake driver to the root\r\n   of your HPX source tree::\r\n\r\n    $ cmake -DBOOST_ROOT=/your_boost_directory \\\r\n         -DHWLOC_ROOT=/your_hwloc_directory \\\r\n         -DCMAKE_INSTALL_PREFIX=/where_hpx_should_be_installed \\\r\n         [other CMake variable definitions] \\\r\n         /path/to/hpx/source/tree\r\n\r\n4) Invoke GNU make. If you are on a machine with multiple cores (very likely),\r\n   add the -jN flag to your make invocation, where N is the number of cores\r\n   on your machine plus one::\r\n\r\n    $ gmake -j5\r\n\r\n5) To complete the build and install HPX::\r\n\r\n    $ gmake install\r\n\r\n   This will build and install the essential core components of HPX only. Use\r\n\r\n    $ gmake tests\r\n\r\n   to build and run the tests and \r\n\r\n    $ gmake examples\r\n    $ gmake install\r\n\r\n   to build and install the examples.\r\n\r\nOS X (Mac)\r\n----------\r\n\r\nThe standard system compiler on OS X is too old to build HPX. You will\r\nhave to install a newer compiler manually, either Clang or GCC. Below\r\nwe describe two possibilities:\r\n\r\n1) Install a recent version of LLVM and Clang.\r\n   In order to build hpx you will need a fairly recent version of Clang\r\n   (at least version 3.2 of Clang and LLVM). For more instructions please \r\n   see http://clang.llvm.org/get_started.html.\r\n\r\n   If you're using Homebrew, ``brew install llvm --with-clang`` will do the trick.\r\n   This will install Clang V3.2 into ``/usr/local/bin``.\r\n\r\n2) Visit http://libcxx.llvm.org/ to get the latest version of the \"libc++\" C++ \r\n   standard library. You need to use the trunk version; what's currently bundled\r\n   with XCode or OS X aren't quite there yet. You can follow the steps in\r\n   http://libcxx.llvm.org/ if you choose, but here's briefly how it could be built::\r\n\r\n      cd /path/to\r\n      git clone http://llvm.org/git/libcxx.git\r\n      cd libcxx/lib\r\n      CXX=clang++-3.2 CC=clang-3.2 TRIPLE=-apple- ./buildit\r\n\r\n   The library is then found in ``/path/to/libcxx/include`` and\r\n   ``/path/to/libcxx/lib``, respectively.\r\n\r\n3) Build (and install) a recent version of Boost, using Clang and libc++::\r\n   To build Boost with Clang and make it link to libc++ as standard library,\r\n   you'll need to set up the following in your Boost ``~/user-config.jam``\r\n   file::\r\n\r\n      # user-config.jam (put this file into your home directory)\r\n      # ...\r\n      # Clang 3.2\r\n      using clang\r\n        : 3.2\r\n        : \"/usr/local/bin/clang++\"\r\n        : <cxxflags>\"-std=c++11 -stdlib=libc++ -isystem /path/to/libcxx/include\"\r\n          <linkflags>\"-stdlib=libc++ -L/path/to/libcxx/lib\"\r\n        ;\r\n\r\n   You can then use this as your build command::\r\n\r\n      b2 --build-dir=/tmp/build-boost --layout=versioned toolset=clang-3.2 install -j5\r\n\r\n4) Clone the master HPX git repository (or a stable tag)::\r\n\r\n    $ git clone git://github.com/STEllAR-GROUP/hpx.git\r\n\r\n5) Build HPX, finally::\r\n\r\n      $ cd hpx\r\n      $ mkdir my_hpx_build\r\n      $ cd my_hpx_build\r\n\r\n   To build with Clang 3.2, execute::\r\n\r\n      $ cmake /path/to/hpx/source/tree \\\r\n           -DCMAKE_CXX_COMPILER=/usr/local/bin/clang++ \\\r\n           -DCMAKE_C_COMPILER=/usr/local/bin/clang-3.2 \\\r\n           -DBOOST_ROOT=/your_boost_directory \\\r\n           -DCMAKE_CXX_FLAGS=\"-isystem /path/to/libcxx/include\" \\\r\n           -DLINK_FLAGS=\"-L /path/to/libcxx/lib\"\r\n      $ make -j5\r\n\r\n6) To complete the build and install HPX::\r\n\r\n    $ make install\r\n\r\n   This will build and install the essential core components of HPX only. Use\r\n\r\n    $ make tests\r\n\r\n   to build and run the tests and \r\n\r\n    $ make examples\r\n    $ make install\r\n\r\n   to build and install the examples.\r\n\r\n\r\nAlternatively, you can install a recent version of gcc as well as all\r\nrequired libraries via MacPorts:\r\n\r\n1) Install (MacPorts)[http://www.macports.org/]\r\n\r\n2) Install Boost, CMake, gcc 4.8, and hwloc:\r\n\r\n   $ sudo port install boost\r\n   $ sudo port install gcc48\r\n   $ sudo port install hwloc\r\n\r\n   You may also want:\r\n\r\n   $ sudo port install cmake\r\n   $ sudo port install git-core\r\n\r\n3) Make this version of gcc your default compiler:\r\n\r\n   $ sudo port install gcc_select\r\n   $ sudo port select gcc mp-gcc48\r\n\r\n4) Build HPX as described above in the ``Linux'' section.\r\n\r\n\r\nWindows\r\n-------\r\n\r\n1) Clone the master HPX git repository (or a stable tag). You can use\r\n   TortoiseGIT, or the git client that Cygwin provides. The git repository can\r\n   be found at::\r\n\r\n    git://github.com/STEllAR-GROUP/hpx.git\r\n\r\n2) Create a build folder. HPX requires an out-of-tree-build. This means that you\r\n   will be unable to run CMake in the HPX source folder.\r\n\r\n3) Open up the CMake GUI. In the input box labelled \"Where is the source code:\",\r\n   enter the full path to the source folder. In the input box labelled\r\n   \"Where to build the binaries:\", enter the full path to the build folder you\r\n   created in step 2.\r\n\r\n4) Add CMake variable definitions (if any) by clicking the \"Add Entry\" button.\r\n   Most probably you will need to at least add the directories where (Boost)[http://www.boost.org]\r\n   is located as BOOST_ROOT and where (Hwloc)[http://www.open-mpi.org/projects/hwloc/]is \r\n   located as HWLOC_ROOT.\r\n\r\n5) Press the \"Configure\" button. A window will pop up asking you which compiler\r\n   to use. Select the x64 Visual Studio 10 compiler (x64 Visual Studio 2012 is\r\n   supported as well). Note that while it is possible to build HPX for x86 \r\n   we don't recommend doing so as 32 bit runs are severely restricted by a 32 bit \r\n   Windows system limitation affecting the number of HPX threads you can create.\r\n\r\n6) If the \"Generate\" button is not clickable, press \"Configure\" again. Repeat\r\n   this step until the \"Generate\" button becomes clickable.\r\n\r\n7) Press \"Generate\".\r\n\r\n8) Open up the build folder, and double-click hpx.sln.\r\n\r\n9) Build the INSTALL target.\r\n\r\n## Acknowledgements\r\n\r\nThis work is supported by the National Science Foundation through awards 1117470 (APX) \r\nand 1240655 (STAR). Any opinions, findings, and conclusions or recommendations expressed\r\nin this material are those of the author(s) and do not necessarily reflect the views of\r\nthe National Science Foundation.\r\n\r\nThis work is also supported by the Center of Computation and \r\nTechnology at Louisiana State University. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}